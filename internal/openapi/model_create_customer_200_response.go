/*
Kable API

The Kable API allows developers to manage **customers** and **API keys** and record **events** about their API.   ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.   ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to application/json.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included regardless whether the API request succeeded or failed. You can use this requestId to help with debugging or when contacting support regarding a specific API call.   ## API Keys  There are two types of API keys on Kable.  ### Kable Keys Kable Keys are the keys you, the Kable customer, use to interact with Kable. These keys help us ensure that only you are interacting with Kable on your behalf. You can find your keys on the Company page of the dashboard after you sign up.  Kable Keys should be included in every request to the Kable API. You must provide your client ID as the `KABLE-CLIENT-ID` header and your secret key as the `KABLE-CLIENT-SECRET` header on each request to Kable. If you are using a language-specific Kable library, you will initialize the SDK using these keys.  ### Customer Keys Customer Keys are the keys your customers use to interact with your API. Customer Keys are authenticated by Kable when a customer makes a request to your API if you use Kable's authentication services. Customers must provide their client ID (defined as `clientId` when you create the customer) as the `X-CLIENT-ID` header and their secret key as the `X-API-KEY` header on each request to your API that Kable is to authenticate.   ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of Kable is **v1**. 

API version: 1.2.1
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CreateCustomer200Response struct for CreateCustomer200Response
type CreateCustomer200Response struct {
	KableClientId *string `json:"kableClientId,omitempty"`
	CustomerId string `json:"customerId"`
	ClientId string `json:"clientId"`
	CompanyName string `json:"companyName"`
	Currency *string `json:"currency,omitempty"`
	Status *string `json:"status,omitempty"`
	NextInvoiceDate *time.Time `json:"nextInvoiceDate,omitempty"`
	StripeCustomerId *string `json:"stripeCustomerId,omitempty"`
	Plans []CustomerPlan `json:"plans,omitempty"`
	Keys []Key `json:"keys,omitempty"`
}

// NewCreateCustomer200Response instantiates a new CreateCustomer200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCustomer200Response(customerId string, clientId string, companyName string) *CreateCustomer200Response {
	this := CreateCustomer200Response{}
	this.CustomerId = customerId
	this.ClientId = clientId
	this.CompanyName = companyName
	return &this
}

// NewCreateCustomer200ResponseWithDefaults instantiates a new CreateCustomer200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCustomer200ResponseWithDefaults() *CreateCustomer200Response {
	this := CreateCustomer200Response{}
	return &this
}

// GetKableClientId returns the KableClientId field value if set, zero value otherwise.
func (o *CreateCustomer200Response) GetKableClientId() string {
	if o == nil || o.KableClientId == nil {
		var ret string
		return ret
	}
	return *o.KableClientId
}

// GetKableClientIdOk returns a tuple with the KableClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetKableClientIdOk() (*string, bool) {
	if o == nil || o.KableClientId == nil {
		return nil, false
	}
	return o.KableClientId, true
}

// HasKableClientId returns a boolean if a field has been set.
func (o *CreateCustomer200Response) HasKableClientId() bool {
	if o != nil && o.KableClientId != nil {
		return true
	}

	return false
}

// SetKableClientId gets a reference to the given string and assigns it to the KableClientId field.
func (o *CreateCustomer200Response) SetKableClientId(v string) {
	o.KableClientId = &v
}

// GetCustomerId returns the CustomerId field value
func (o *CreateCustomer200Response) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *CreateCustomer200Response) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetClientId returns the ClientId field value
func (o *CreateCustomer200Response) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *CreateCustomer200Response) SetClientId(v string) {
	o.ClientId = v
}

// GetCompanyName returns the CompanyName field value
func (o *CreateCustomer200Response) GetCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyName, true
}

// SetCompanyName sets field value
func (o *CreateCustomer200Response) SetCompanyName(v string) {
	o.CompanyName = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreateCustomer200Response) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreateCustomer200Response) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CreateCustomer200Response) SetCurrency(v string) {
	o.Currency = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CreateCustomer200Response) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CreateCustomer200Response) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CreateCustomer200Response) SetStatus(v string) {
	o.Status = &v
}

// GetNextInvoiceDate returns the NextInvoiceDate field value if set, zero value otherwise.
func (o *CreateCustomer200Response) GetNextInvoiceDate() time.Time {
	if o == nil || o.NextInvoiceDate == nil {
		var ret time.Time
		return ret
	}
	return *o.NextInvoiceDate
}

// GetNextInvoiceDateOk returns a tuple with the NextInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetNextInvoiceDateOk() (*time.Time, bool) {
	if o == nil || o.NextInvoiceDate == nil {
		return nil, false
	}
	return o.NextInvoiceDate, true
}

// HasNextInvoiceDate returns a boolean if a field has been set.
func (o *CreateCustomer200Response) HasNextInvoiceDate() bool {
	if o != nil && o.NextInvoiceDate != nil {
		return true
	}

	return false
}

// SetNextInvoiceDate gets a reference to the given time.Time and assigns it to the NextInvoiceDate field.
func (o *CreateCustomer200Response) SetNextInvoiceDate(v time.Time) {
	o.NextInvoiceDate = &v
}

// GetStripeCustomerId returns the StripeCustomerId field value if set, zero value otherwise.
func (o *CreateCustomer200Response) GetStripeCustomerId() string {
	if o == nil || o.StripeCustomerId == nil {
		var ret string
		return ret
	}
	return *o.StripeCustomerId
}

// GetStripeCustomerIdOk returns a tuple with the StripeCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetStripeCustomerIdOk() (*string, bool) {
	if o == nil || o.StripeCustomerId == nil {
		return nil, false
	}
	return o.StripeCustomerId, true
}

// HasStripeCustomerId returns a boolean if a field has been set.
func (o *CreateCustomer200Response) HasStripeCustomerId() bool {
	if o != nil && o.StripeCustomerId != nil {
		return true
	}

	return false
}

// SetStripeCustomerId gets a reference to the given string and assigns it to the StripeCustomerId field.
func (o *CreateCustomer200Response) SetStripeCustomerId(v string) {
	o.StripeCustomerId = &v
}

// GetPlans returns the Plans field value if set, zero value otherwise.
func (o *CreateCustomer200Response) GetPlans() []CustomerPlan {
	if o == nil || o.Plans == nil {
		var ret []CustomerPlan
		return ret
	}
	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetPlansOk() ([]CustomerPlan, bool) {
	if o == nil || o.Plans == nil {
		return nil, false
	}
	return o.Plans, true
}

// HasPlans returns a boolean if a field has been set.
func (o *CreateCustomer200Response) HasPlans() bool {
	if o != nil && o.Plans != nil {
		return true
	}

	return false
}

// SetPlans gets a reference to the given []CustomerPlan and assigns it to the Plans field.
func (o *CreateCustomer200Response) SetPlans(v []CustomerPlan) {
	o.Plans = v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *CreateCustomer200Response) GetKeys() []Key {
	if o == nil || o.Keys == nil {
		var ret []Key
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomer200Response) GetKeysOk() ([]Key, bool) {
	if o == nil || o.Keys == nil {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *CreateCustomer200Response) HasKeys() bool {
	if o != nil && o.Keys != nil {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []Key and assigns it to the Keys field.
func (o *CreateCustomer200Response) SetKeys(v []Key) {
	o.Keys = v
}

func (o CreateCustomer200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KableClientId != nil {
		toSerialize["kableClientId"] = o.KableClientId
	}
	if true {
		toSerialize["customerId"] = o.CustomerId
	}
	if true {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["companyName"] = o.CompanyName
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.NextInvoiceDate != nil {
		toSerialize["nextInvoiceDate"] = o.NextInvoiceDate
	}
	if o.StripeCustomerId != nil {
		toSerialize["stripeCustomerId"] = o.StripeCustomerId
	}
	if o.Plans != nil {
		toSerialize["plans"] = o.Plans
	}
	if o.Keys != nil {
		toSerialize["keys"] = o.Keys
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCustomer200Response struct {
	value *CreateCustomer200Response
	isSet bool
}

func (v NullableCreateCustomer200Response) Get() *CreateCustomer200Response {
	return v.value
}

func (v *NullableCreateCustomer200Response) Set(val *CreateCustomer200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCustomer200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCustomer200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCustomer200Response(val *CreateCustomer200Response) *NullableCreateCustomer200Response {
	return &NullableCreateCustomer200Response{value: val, isSet: true}
}

func (v NullableCreateCustomer200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCustomer200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


