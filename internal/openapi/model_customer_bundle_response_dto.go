/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CustomerBundleResponseDto struct for CustomerBundleResponseDto
type CustomerBundleResponseDto struct {
	// A Kable-defined identifier for the bundle.
	BundleId string `json:"bundleId"`
	// A human-readable name for the bundle, visible on dashboards, invoices, and reports.
	Name string `json:"name"`
	// An identifier for the bundle as defined by your API.
	ExternalId *string `json:"externalId,omitempty"`
	// A human-readable description for the bundle, visible on dashboards, invoices, and reports.
	Description *string `json:"description,omitempty"`
	// An additional identifier for the bundle, defined by you, that is *not* visible to customers. If you have different *Monthly Active Users Bundle*s for different cohorts of customers, this is a useful place to differentiate those.
	Nickname *string `json:"nickname,omitempty"`
	// Three-letter ISO currency code
	Currency string `json:"currency"`
	// The plans included in this bundle.
	Plans []PlanResponseDto `json:"plans,omitempty"`
	// Arbitrary key-value pairs to attach to the object that can be useful for controlling functionality inside your API.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Date at which entity was first created
	Created time.Time `json:"created"`
	// Date at which entity was last modified
	Modified time.Time `json:"modified"`
}

// NewCustomerBundleResponseDto instantiates a new CustomerBundleResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerBundleResponseDto(bundleId string, name string, currency string, created time.Time, modified time.Time) *CustomerBundleResponseDto {
	this := CustomerBundleResponseDto{}
	this.BundleId = bundleId
	this.Name = name
	this.Currency = currency
	this.Created = created
	this.Modified = modified
	return &this
}

// NewCustomerBundleResponseDtoWithDefaults instantiates a new CustomerBundleResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerBundleResponseDtoWithDefaults() *CustomerBundleResponseDto {
	this := CustomerBundleResponseDto{}
	return &this
}

// GetBundleId returns the BundleId field value
func (o *CustomerBundleResponseDto) GetBundleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetBundleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BundleId, true
}

// SetBundleId sets field value
func (o *CustomerBundleResponseDto) SetBundleId(v string) {
	o.BundleId = v
}

// GetName returns the Name field value
func (o *CustomerBundleResponseDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomerBundleResponseDto) SetName(v string) {
	o.Name = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CustomerBundleResponseDto) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CustomerBundleResponseDto) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CustomerBundleResponseDto) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomerBundleResponseDto) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomerBundleResponseDto) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomerBundleResponseDto) SetDescription(v string) {
	o.Description = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *CustomerBundleResponseDto) GetNickname() string {
	if o == nil || o.Nickname == nil {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetNicknameOk() (*string, bool) {
	if o == nil || o.Nickname == nil {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *CustomerBundleResponseDto) HasNickname() bool {
	if o != nil && o.Nickname != nil {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *CustomerBundleResponseDto) SetNickname(v string) {
	o.Nickname = &v
}

// GetCurrency returns the Currency field value
func (o *CustomerBundleResponseDto) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CustomerBundleResponseDto) SetCurrency(v string) {
	o.Currency = v
}

// GetPlans returns the Plans field value if set, zero value otherwise.
func (o *CustomerBundleResponseDto) GetPlans() []PlanResponseDto {
	if o == nil || o.Plans == nil {
		var ret []PlanResponseDto
		return ret
	}
	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetPlansOk() ([]PlanResponseDto, bool) {
	if o == nil || o.Plans == nil {
		return nil, false
	}
	return o.Plans, true
}

// HasPlans returns a boolean if a field has been set.
func (o *CustomerBundleResponseDto) HasPlans() bool {
	if o != nil && o.Plans != nil {
		return true
	}

	return false
}

// SetPlans gets a reference to the given []PlanResponseDto and assigns it to the Plans field.
func (o *CustomerBundleResponseDto) SetPlans(v []PlanResponseDto) {
	o.Plans = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CustomerBundleResponseDto) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CustomerBundleResponseDto) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CustomerBundleResponseDto) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetCreated returns the Created field value
func (o *CustomerBundleResponseDto) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CustomerBundleResponseDto) SetCreated(v time.Time) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *CustomerBundleResponseDto) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *CustomerBundleResponseDto) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *CustomerBundleResponseDto) SetModified(v time.Time) {
	o.Modified = v
}

func (o CustomerBundleResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bundleId"] = o.BundleId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Nickname != nil {
		toSerialize["nickname"] = o.Nickname
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if o.Plans != nil {
		toSerialize["plans"] = o.Plans
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["modified"] = o.Modified
	}
	return json.Marshal(toSerialize)
}

type NullableCustomerBundleResponseDto struct {
	value *CustomerBundleResponseDto
	isSet bool
}

func (v NullableCustomerBundleResponseDto) Get() *CustomerBundleResponseDto {
	return v.value
}

func (v *NullableCustomerBundleResponseDto) Set(val *CustomerBundleResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerBundleResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerBundleResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerBundleResponseDto(val *CustomerBundleResponseDto) *NullableCustomerBundleResponseDto {
	return &NullableCustomerBundleResponseDto{value: val, isSet: true}
}

func (v NullableCustomerBundleResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerBundleResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


