/*
Kable API

The Kable API allows developers to manage **customers** and **API keys** and record **events** about their API.   ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.   ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to application/json.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included regardless whether the API request succeeded or failed. You can use this requestId to help with debugging or when contacting support regarding a specific API call.   ## API Keys  There are two types of API keys on Kable.  ### Kable Keys Kable Keys are the keys you, the Kable customer, use to interact with Kable. These keys help us ensure that only you are interacting with Kable on your behalf. You can find your keys on the Company page of the dashboard after you sign up.  Kable Keys should be included in every request to the Kable API. You must provide your client ID as the `KABLE-CLIENT-ID` header and your secret key as the `KABLE-CLIENT-SECRET` header on each request to Kable. If you are using a language-specific Kable library, you will initialize the SDK using these keys.  ### Customer Keys Customer Keys are the keys your customers use to interact with your API. Customer Keys are authenticated by Kable when a customer makes a request to your API if you use Kable's authentication services. Customers must provide their client ID (defined as `clientId` when you create the customer) as the `X-CLIENT-ID` header and their secret key as the `X-API-KEY` header on each request to your API that Kable is to authenticate.   ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of Kable is **v1**. 

API version: 1.2.1
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// UsageMetricInterval struct for UsageMetricInterval
type UsageMetricInterval struct {
	// Start of the interval
	IntervalStart time.Time `json:"intervalStart"`
	// End of the interval
	IntervalEnd time.Time `json:"intervalEnd"`
	Dimension *Dimension `json:"dimension,omitempty"`
	// When provided, query will consider only this customer. When `null`, query will consider all of your customers.
	ClientId *string `json:"clientId,omitempty"`
	// The total usage for the requested interval
	Total float32 `json:"total"`
}

// NewUsageMetricInterval instantiates a new UsageMetricInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageMetricInterval(intervalStart time.Time, intervalEnd time.Time, total float32) *UsageMetricInterval {
	this := UsageMetricInterval{}
	this.IntervalStart = intervalStart
	this.IntervalEnd = intervalEnd
	this.Total = total
	return &this
}

// NewUsageMetricIntervalWithDefaults instantiates a new UsageMetricInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageMetricIntervalWithDefaults() *UsageMetricInterval {
	this := UsageMetricInterval{}
	return &this
}

// GetIntervalStart returns the IntervalStart field value
func (o *UsageMetricInterval) GetIntervalStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IntervalStart
}

// GetIntervalStartOk returns a tuple with the IntervalStart field value
// and a boolean to check if the value has been set.
func (o *UsageMetricInterval) GetIntervalStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalStart, true
}

// SetIntervalStart sets field value
func (o *UsageMetricInterval) SetIntervalStart(v time.Time) {
	o.IntervalStart = v
}

// GetIntervalEnd returns the IntervalEnd field value
func (o *UsageMetricInterval) GetIntervalEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IntervalEnd
}

// GetIntervalEndOk returns a tuple with the IntervalEnd field value
// and a boolean to check if the value has been set.
func (o *UsageMetricInterval) GetIntervalEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalEnd, true
}

// SetIntervalEnd sets field value
func (o *UsageMetricInterval) SetIntervalEnd(v time.Time) {
	o.IntervalEnd = v
}

// GetDimension returns the Dimension field value if set, zero value otherwise.
func (o *UsageMetricInterval) GetDimension() Dimension {
	if o == nil || o.Dimension == nil {
		var ret Dimension
		return ret
	}
	return *o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageMetricInterval) GetDimensionOk() (*Dimension, bool) {
	if o == nil || o.Dimension == nil {
		return nil, false
	}
	return o.Dimension, true
}

// HasDimension returns a boolean if a field has been set.
func (o *UsageMetricInterval) HasDimension() bool {
	if o != nil && o.Dimension != nil {
		return true
	}

	return false
}

// SetDimension gets a reference to the given Dimension and assigns it to the Dimension field.
func (o *UsageMetricInterval) SetDimension(v Dimension) {
	o.Dimension = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *UsageMetricInterval) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageMetricInterval) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *UsageMetricInterval) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *UsageMetricInterval) SetClientId(v string) {
	o.ClientId = &v
}

// GetTotal returns the Total field value
func (o *UsageMetricInterval) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *UsageMetricInterval) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *UsageMetricInterval) SetTotal(v float32) {
	o.Total = v
}

func (o UsageMetricInterval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["intervalStart"] = o.IntervalStart
	}
	if true {
		toSerialize["intervalEnd"] = o.IntervalEnd
	}
	if o.Dimension != nil {
		toSerialize["dimension"] = o.Dimension
	}
	if o.ClientId != nil {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableUsageMetricInterval struct {
	value *UsageMetricInterval
	isSet bool
}

func (v NullableUsageMetricInterval) Get() *UsageMetricInterval {
	return v.value
}

func (v *NullableUsageMetricInterval) Set(val *UsageMetricInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageMetricInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageMetricInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageMetricInterval(val *UsageMetricInterval) *NullableUsageMetricInterval {
	return &NullableUsageMetricInterval{value: val, isSet: true}
}

func (v NullableUsageMetricInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageMetricInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


