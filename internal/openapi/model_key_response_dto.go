/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// KeyResponseDto struct for KeyResponseDto
type KeyResponseDto struct {
	// A unique identifier for the customer, defined by you.
	ClientId string `json:"clientId"`
	// The API key value
	Key string `json:"key"`
	// The time at which the key was revoked
	RevokedAt *time.Time `json:"revokedAt,omitempty"`
	// Date at which entity was first created
	Created time.Time `json:"created"`
}

// NewKeyResponseDto instantiates a new KeyResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyResponseDto(clientId string, key string, created time.Time) *KeyResponseDto {
	this := KeyResponseDto{}
	this.ClientId = clientId
	this.Key = key
	this.Created = created
	return &this
}

// NewKeyResponseDtoWithDefaults instantiates a new KeyResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyResponseDtoWithDefaults() *KeyResponseDto {
	this := KeyResponseDto{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *KeyResponseDto) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *KeyResponseDto) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *KeyResponseDto) SetClientId(v string) {
	o.ClientId = v
}

// GetKey returns the Key field value
func (o *KeyResponseDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *KeyResponseDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *KeyResponseDto) SetKey(v string) {
	o.Key = v
}

// GetRevokedAt returns the RevokedAt field value if set, zero value otherwise.
func (o *KeyResponseDto) GetRevokedAt() time.Time {
	if o == nil || o.RevokedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.RevokedAt
}

// GetRevokedAtOk returns a tuple with the RevokedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyResponseDto) GetRevokedAtOk() (*time.Time, bool) {
	if o == nil || o.RevokedAt == nil {
		return nil, false
	}
	return o.RevokedAt, true
}

// HasRevokedAt returns a boolean if a field has been set.
func (o *KeyResponseDto) HasRevokedAt() bool {
	if o != nil && o.RevokedAt != nil {
		return true
	}

	return false
}

// SetRevokedAt gets a reference to the given time.Time and assigns it to the RevokedAt field.
func (o *KeyResponseDto) SetRevokedAt(v time.Time) {
	o.RevokedAt = &v
}

// GetCreated returns the Created field value
func (o *KeyResponseDto) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *KeyResponseDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *KeyResponseDto) SetCreated(v time.Time) {
	o.Created = v
}

func (o KeyResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.RevokedAt != nil {
		toSerialize["revokedAt"] = o.RevokedAt
	}
	if true {
		toSerialize["created"] = o.Created
	}
	return json.Marshal(toSerialize)
}

type NullableKeyResponseDto struct {
	value *KeyResponseDto
	isSet bool
}

func (v NullableKeyResponseDto) Get() *KeyResponseDto {
	return v.value
}

func (v *NullableKeyResponseDto) Set(val *KeyResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyResponseDto(val *KeyResponseDto) *NullableKeyResponseDto {
	return &NullableKeyResponseDto{value: val, isSet: true}
}

func (v NullableKeyResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


