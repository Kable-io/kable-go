/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateCustomerRequestDto struct for CreateCustomerRequestDto
type CreateCustomerRequestDto struct {
	// A unique identifier for the customer, defined by you. This usually corresponds to your own internal unique identifier for customers, and is the identifier by which Kable attributes customer usage.
	ClientId string `json:"clientId"`
	// The name of the customer, visible on dashboards, invoices, and reports.
	CompanyName string `json:"companyName"`
	// Three-letter ISO currency code
	Currency string `json:"currency"`
	// The customer's Stripe `customer_id`, if one already exists, for automatic invoice processing through Stripe.
	StripeCustomerId *string `json:"stripeCustomerId,omitempty"`
	// A collection of plans to which to subscribe the customer.
	PlanIds []string `json:"planIds,omitempty"`
	// A collection of bundles to which to subscribe the customer.
	BundleIds []string `json:"bundleIds,omitempty"`
	BillingContact *CustomerResponseDtoBillingContact `json:"billingContact,omitempty"`
}

// NewCreateCustomerRequestDto instantiates a new CreateCustomerRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCustomerRequestDto(clientId string, companyName string, currency string) *CreateCustomerRequestDto {
	this := CreateCustomerRequestDto{}
	this.ClientId = clientId
	this.CompanyName = companyName
	this.Currency = currency
	return &this
}

// NewCreateCustomerRequestDtoWithDefaults instantiates a new CreateCustomerRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCustomerRequestDtoWithDefaults() *CreateCustomerRequestDto {
	this := CreateCustomerRequestDto{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *CreateCustomerRequestDto) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequestDto) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *CreateCustomerRequestDto) SetClientId(v string) {
	o.ClientId = v
}

// GetCompanyName returns the CompanyName field value
func (o *CreateCustomerRequestDto) GetCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequestDto) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyName, true
}

// SetCompanyName sets field value
func (o *CreateCustomerRequestDto) SetCompanyName(v string) {
	o.CompanyName = v
}

// GetCurrency returns the Currency field value
func (o *CreateCustomerRequestDto) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequestDto) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CreateCustomerRequestDto) SetCurrency(v string) {
	o.Currency = v
}

// GetStripeCustomerId returns the StripeCustomerId field value if set, zero value otherwise.
func (o *CreateCustomerRequestDto) GetStripeCustomerId() string {
	if o == nil || o.StripeCustomerId == nil {
		var ret string
		return ret
	}
	return *o.StripeCustomerId
}

// GetStripeCustomerIdOk returns a tuple with the StripeCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequestDto) GetStripeCustomerIdOk() (*string, bool) {
	if o == nil || o.StripeCustomerId == nil {
		return nil, false
	}
	return o.StripeCustomerId, true
}

// HasStripeCustomerId returns a boolean if a field has been set.
func (o *CreateCustomerRequestDto) HasStripeCustomerId() bool {
	if o != nil && o.StripeCustomerId != nil {
		return true
	}

	return false
}

// SetStripeCustomerId gets a reference to the given string and assigns it to the StripeCustomerId field.
func (o *CreateCustomerRequestDto) SetStripeCustomerId(v string) {
	o.StripeCustomerId = &v
}

// GetPlanIds returns the PlanIds field value if set, zero value otherwise.
func (o *CreateCustomerRequestDto) GetPlanIds() []string {
	if o == nil || o.PlanIds == nil {
		var ret []string
		return ret
	}
	return o.PlanIds
}

// GetPlanIdsOk returns a tuple with the PlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequestDto) GetPlanIdsOk() ([]string, bool) {
	if o == nil || o.PlanIds == nil {
		return nil, false
	}
	return o.PlanIds, true
}

// HasPlanIds returns a boolean if a field has been set.
func (o *CreateCustomerRequestDto) HasPlanIds() bool {
	if o != nil && o.PlanIds != nil {
		return true
	}

	return false
}

// SetPlanIds gets a reference to the given []string and assigns it to the PlanIds field.
func (o *CreateCustomerRequestDto) SetPlanIds(v []string) {
	o.PlanIds = v
}

// GetBundleIds returns the BundleIds field value if set, zero value otherwise.
func (o *CreateCustomerRequestDto) GetBundleIds() []string {
	if o == nil || o.BundleIds == nil {
		var ret []string
		return ret
	}
	return o.BundleIds
}

// GetBundleIdsOk returns a tuple with the BundleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequestDto) GetBundleIdsOk() ([]string, bool) {
	if o == nil || o.BundleIds == nil {
		return nil, false
	}
	return o.BundleIds, true
}

// HasBundleIds returns a boolean if a field has been set.
func (o *CreateCustomerRequestDto) HasBundleIds() bool {
	if o != nil && o.BundleIds != nil {
		return true
	}

	return false
}

// SetBundleIds gets a reference to the given []string and assigns it to the BundleIds field.
func (o *CreateCustomerRequestDto) SetBundleIds(v []string) {
	o.BundleIds = v
}

// GetBillingContact returns the BillingContact field value if set, zero value otherwise.
func (o *CreateCustomerRequestDto) GetBillingContact() CustomerResponseDtoBillingContact {
	if o == nil || o.BillingContact == nil {
		var ret CustomerResponseDtoBillingContact
		return ret
	}
	return *o.BillingContact
}

// GetBillingContactOk returns a tuple with the BillingContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequestDto) GetBillingContactOk() (*CustomerResponseDtoBillingContact, bool) {
	if o == nil || o.BillingContact == nil {
		return nil, false
	}
	return o.BillingContact, true
}

// HasBillingContact returns a boolean if a field has been set.
func (o *CreateCustomerRequestDto) HasBillingContact() bool {
	if o != nil && o.BillingContact != nil {
		return true
	}

	return false
}

// SetBillingContact gets a reference to the given CustomerResponseDtoBillingContact and assigns it to the BillingContact field.
func (o *CreateCustomerRequestDto) SetBillingContact(v CustomerResponseDtoBillingContact) {
	o.BillingContact = &v
}

func (o CreateCustomerRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["companyName"] = o.CompanyName
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if o.StripeCustomerId != nil {
		toSerialize["stripeCustomerId"] = o.StripeCustomerId
	}
	if o.PlanIds != nil {
		toSerialize["planIds"] = o.PlanIds
	}
	if o.BundleIds != nil {
		toSerialize["bundleIds"] = o.BundleIds
	}
	if o.BillingContact != nil {
		toSerialize["billingContact"] = o.BillingContact
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCustomerRequestDto struct {
	value *CreateCustomerRequestDto
	isSet bool
}

func (v NullableCreateCustomerRequestDto) Get() *CreateCustomerRequestDto {
	return v.value
}

func (v *NullableCreateCustomerRequestDto) Set(val *CreateCustomerRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCustomerRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCustomerRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCustomerRequestDto(val *CreateCustomerRequestDto) *NullableCreateCustomerRequestDto {
	return &NullableCreateCustomerRequestDto{value: val, isSet: true}
}

func (v NullableCreateCustomerRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCustomerRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


