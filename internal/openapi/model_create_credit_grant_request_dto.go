/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CreateCreditGrantRequestDto struct for CreateCreditGrantRequestDto
type CreateCreditGrantRequestDto struct {
	// The number of credits to create in the grant.
	GrantAmount float32 `json:"grantAmount"`
	// An optional amount to charge the customer (in the customer's configured `currency`) before issuing a credit grant.  When the `chargeAmount` field is supplied, Kable will attempt to charge the customer immediately through Stripe before issuing the grant. Therefore, when specifying a `chargeAmount`, the customer must have a Stripe integration defined and have a default payment card on-file.
	ChargeAmount *float32 `json:"chargeAmount,omitempty"`
	// A human-readable description that explains why the credit grant is being created.
	Description *string `json:"description,omitempty"`
	// The expiration date of the credit grant.
	Expiration *time.Time `json:"expiration,omitempty"`
}

// NewCreateCreditGrantRequestDto instantiates a new CreateCreditGrantRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCreditGrantRequestDto(grantAmount float32) *CreateCreditGrantRequestDto {
	this := CreateCreditGrantRequestDto{}
	this.GrantAmount = grantAmount
	return &this
}

// NewCreateCreditGrantRequestDtoWithDefaults instantiates a new CreateCreditGrantRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCreditGrantRequestDtoWithDefaults() *CreateCreditGrantRequestDto {
	this := CreateCreditGrantRequestDto{}
	return &this
}

// GetGrantAmount returns the GrantAmount field value
func (o *CreateCreditGrantRequestDto) GetGrantAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.GrantAmount
}

// GetGrantAmountOk returns a tuple with the GrantAmount field value
// and a boolean to check if the value has been set.
func (o *CreateCreditGrantRequestDto) GetGrantAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantAmount, true
}

// SetGrantAmount sets field value
func (o *CreateCreditGrantRequestDto) SetGrantAmount(v float32) {
	o.GrantAmount = v
}

// GetChargeAmount returns the ChargeAmount field value if set, zero value otherwise.
func (o *CreateCreditGrantRequestDto) GetChargeAmount() float32 {
	if o == nil || o.ChargeAmount == nil {
		var ret float32
		return ret
	}
	return *o.ChargeAmount
}

// GetChargeAmountOk returns a tuple with the ChargeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCreditGrantRequestDto) GetChargeAmountOk() (*float32, bool) {
	if o == nil || o.ChargeAmount == nil {
		return nil, false
	}
	return o.ChargeAmount, true
}

// HasChargeAmount returns a boolean if a field has been set.
func (o *CreateCreditGrantRequestDto) HasChargeAmount() bool {
	if o != nil && o.ChargeAmount != nil {
		return true
	}

	return false
}

// SetChargeAmount gets a reference to the given float32 and assigns it to the ChargeAmount field.
func (o *CreateCreditGrantRequestDto) SetChargeAmount(v float32) {
	o.ChargeAmount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateCreditGrantRequestDto) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCreditGrantRequestDto) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateCreditGrantRequestDto) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateCreditGrantRequestDto) SetDescription(v string) {
	o.Description = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *CreateCreditGrantRequestDto) GetExpiration() time.Time {
	if o == nil || o.Expiration == nil {
		var ret time.Time
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCreditGrantRequestDto) GetExpirationOk() (*time.Time, bool) {
	if o == nil || o.Expiration == nil {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *CreateCreditGrantRequestDto) HasExpiration() bool {
	if o != nil && o.Expiration != nil {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given time.Time and assigns it to the Expiration field.
func (o *CreateCreditGrantRequestDto) SetExpiration(v time.Time) {
	o.Expiration = &v
}

func (o CreateCreditGrantRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["grantAmount"] = o.GrantAmount
	}
	if o.ChargeAmount != nil {
		toSerialize["chargeAmount"] = o.ChargeAmount
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Expiration != nil {
		toSerialize["expiration"] = o.Expiration
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCreditGrantRequestDto struct {
	value *CreateCreditGrantRequestDto
	isSet bool
}

func (v NullableCreateCreditGrantRequestDto) Get() *CreateCreditGrantRequestDto {
	return v.value
}

func (v *NullableCreateCreditGrantRequestDto) Set(val *CreateCreditGrantRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCreditGrantRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCreditGrantRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCreditGrantRequestDto(val *CreateCreditGrantRequestDto) *NullableCreateCreditGrantRequestDto {
	return &NullableCreateCreditGrantRequestDto{value: val, isSet: true}
}

func (v NullableCreateCreditGrantRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCreditGrantRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


