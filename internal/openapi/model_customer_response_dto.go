/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CustomerResponseDto struct for CustomerResponseDto
type CustomerResponseDto struct {
	// Your Kable client ID, found in the dashboard of your Kable account
	KableClientId string `json:"kableClientId"`
	// A Kable-defined identifier for the customer.
	CustomerId string `json:"customerId"`
	// A unique identifier for the customer, defined by you.
	ClientId string `json:"clientId"`
	// The name of the customer.
	CompanyName string `json:"companyName"`
	// Three-letter ISO currency code
	Currency string `json:"currency"`
	// The status of the customer.
	Status string `json:"status"`
	// The date at which the customer's next invoice will occur.
	NextInvoiceDate *time.Time `json:"nextInvoiceDate,omitempty"`
	BillingContact *CustomerResponseDtoBillingContact `json:"billingContact,omitempty"`
	// The customer's plans.
	Plans []CustomerPlanResponseDto `json:"plans"`
	// The customer's bundles.
	Bundles []CustomerBundleResponseDto `json:"bundles"`
	// The customer's entitlements.
	Entitlements []ResourceEntitlementResponseDto `json:"entitlements"`
	// Date at which entity was first created
	Created time.Time `json:"created"`
	// Date at which entity was last modified
	Modified time.Time `json:"modified"`
}

// NewCustomerResponseDto instantiates a new CustomerResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerResponseDto(kableClientId string, customerId string, clientId string, companyName string, currency string, status string, plans []CustomerPlanResponseDto, bundles []CustomerBundleResponseDto, entitlements []ResourceEntitlementResponseDto, created time.Time, modified time.Time) *CustomerResponseDto {
	this := CustomerResponseDto{}
	this.KableClientId = kableClientId
	this.CustomerId = customerId
	this.ClientId = clientId
	this.CompanyName = companyName
	this.Currency = currency
	this.Status = status
	this.Plans = plans
	this.Bundles = bundles
	this.Entitlements = entitlements
	this.Created = created
	this.Modified = modified
	return &this
}

// NewCustomerResponseDtoWithDefaults instantiates a new CustomerResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerResponseDtoWithDefaults() *CustomerResponseDto {
	this := CustomerResponseDto{}
	return &this
}

// GetKableClientId returns the KableClientId field value
func (o *CustomerResponseDto) GetKableClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KableClientId
}

// GetKableClientIdOk returns a tuple with the KableClientId field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetKableClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KableClientId, true
}

// SetKableClientId sets field value
func (o *CustomerResponseDto) SetKableClientId(v string) {
	o.KableClientId = v
}

// GetCustomerId returns the CustomerId field value
func (o *CustomerResponseDto) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *CustomerResponseDto) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetClientId returns the ClientId field value
func (o *CustomerResponseDto) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *CustomerResponseDto) SetClientId(v string) {
	o.ClientId = v
}

// GetCompanyName returns the CompanyName field value
func (o *CustomerResponseDto) GetCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyName, true
}

// SetCompanyName sets field value
func (o *CustomerResponseDto) SetCompanyName(v string) {
	o.CompanyName = v
}

// GetCurrency returns the Currency field value
func (o *CustomerResponseDto) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CustomerResponseDto) SetCurrency(v string) {
	o.Currency = v
}

// GetStatus returns the Status field value
func (o *CustomerResponseDto) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CustomerResponseDto) SetStatus(v string) {
	o.Status = v
}

// GetNextInvoiceDate returns the NextInvoiceDate field value if set, zero value otherwise.
func (o *CustomerResponseDto) GetNextInvoiceDate() time.Time {
	if o == nil || o.NextInvoiceDate == nil {
		var ret time.Time
		return ret
	}
	return *o.NextInvoiceDate
}

// GetNextInvoiceDateOk returns a tuple with the NextInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetNextInvoiceDateOk() (*time.Time, bool) {
	if o == nil || o.NextInvoiceDate == nil {
		return nil, false
	}
	return o.NextInvoiceDate, true
}

// HasNextInvoiceDate returns a boolean if a field has been set.
func (o *CustomerResponseDto) HasNextInvoiceDate() bool {
	if o != nil && o.NextInvoiceDate != nil {
		return true
	}

	return false
}

// SetNextInvoiceDate gets a reference to the given time.Time and assigns it to the NextInvoiceDate field.
func (o *CustomerResponseDto) SetNextInvoiceDate(v time.Time) {
	o.NextInvoiceDate = &v
}

// GetBillingContact returns the BillingContact field value if set, zero value otherwise.
func (o *CustomerResponseDto) GetBillingContact() CustomerResponseDtoBillingContact {
	if o == nil || o.BillingContact == nil {
		var ret CustomerResponseDtoBillingContact
		return ret
	}
	return *o.BillingContact
}

// GetBillingContactOk returns a tuple with the BillingContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetBillingContactOk() (*CustomerResponseDtoBillingContact, bool) {
	if o == nil || o.BillingContact == nil {
		return nil, false
	}
	return o.BillingContact, true
}

// HasBillingContact returns a boolean if a field has been set.
func (o *CustomerResponseDto) HasBillingContact() bool {
	if o != nil && o.BillingContact != nil {
		return true
	}

	return false
}

// SetBillingContact gets a reference to the given CustomerResponseDtoBillingContact and assigns it to the BillingContact field.
func (o *CustomerResponseDto) SetBillingContact(v CustomerResponseDtoBillingContact) {
	o.BillingContact = &v
}

// GetPlans returns the Plans field value
func (o *CustomerResponseDto) GetPlans() []CustomerPlanResponseDto {
	if o == nil {
		var ret []CustomerPlanResponseDto
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetPlansOk() ([]CustomerPlanResponseDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plans, true
}

// SetPlans sets field value
func (o *CustomerResponseDto) SetPlans(v []CustomerPlanResponseDto) {
	o.Plans = v
}

// GetBundles returns the Bundles field value
func (o *CustomerResponseDto) GetBundles() []CustomerBundleResponseDto {
	if o == nil {
		var ret []CustomerBundleResponseDto
		return ret
	}

	return o.Bundles
}

// GetBundlesOk returns a tuple with the Bundles field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetBundlesOk() ([]CustomerBundleResponseDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bundles, true
}

// SetBundles sets field value
func (o *CustomerResponseDto) SetBundles(v []CustomerBundleResponseDto) {
	o.Bundles = v
}

// GetEntitlements returns the Entitlements field value
func (o *CustomerResponseDto) GetEntitlements() []ResourceEntitlementResponseDto {
	if o == nil {
		var ret []ResourceEntitlementResponseDto
		return ret
	}

	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetEntitlementsOk() ([]ResourceEntitlementResponseDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entitlements, true
}

// SetEntitlements sets field value
func (o *CustomerResponseDto) SetEntitlements(v []ResourceEntitlementResponseDto) {
	o.Entitlements = v
}

// GetCreated returns the Created field value
func (o *CustomerResponseDto) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CustomerResponseDto) SetCreated(v time.Time) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *CustomerResponseDto) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *CustomerResponseDto) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *CustomerResponseDto) SetModified(v time.Time) {
	o.Modified = v
}

func (o CustomerResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kableClientId"] = o.KableClientId
	}
	if true {
		toSerialize["customerId"] = o.CustomerId
	}
	if true {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["companyName"] = o.CompanyName
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.NextInvoiceDate != nil {
		toSerialize["nextInvoiceDate"] = o.NextInvoiceDate
	}
	if o.BillingContact != nil {
		toSerialize["billingContact"] = o.BillingContact
	}
	if true {
		toSerialize["plans"] = o.Plans
	}
	if true {
		toSerialize["bundles"] = o.Bundles
	}
	if true {
		toSerialize["entitlements"] = o.Entitlements
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["modified"] = o.Modified
	}
	return json.Marshal(toSerialize)
}

type NullableCustomerResponseDto struct {
	value *CustomerResponseDto
	isSet bool
}

func (v NullableCustomerResponseDto) Get() *CustomerResponseDto {
	return v.value
}

func (v *NullableCustomerResponseDto) Set(val *CustomerResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerResponseDto(val *CustomerResponseDto) *NullableCustomerResponseDto {
	return &NullableCustomerResponseDto{value: val, isSet: true}
}

func (v NullableCustomerResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


