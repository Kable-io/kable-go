/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddCustomerPaymentMethodRequestDto struct for AddCustomerPaymentMethodRequestDto
type AddCustomerPaymentMethodRequestDto struct {
	// The url to which to redirect after successful payment method creation
	SuccessUrl string `json:"successUrl"`
	// The url to which to redirect after failed payment method creation
	CancelUrl string `json:"cancelUrl"`
}

// NewAddCustomerPaymentMethodRequestDto instantiates a new AddCustomerPaymentMethodRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCustomerPaymentMethodRequestDto(successUrl string, cancelUrl string) *AddCustomerPaymentMethodRequestDto {
	this := AddCustomerPaymentMethodRequestDto{}
	this.SuccessUrl = successUrl
	this.CancelUrl = cancelUrl
	return &this
}

// NewAddCustomerPaymentMethodRequestDtoWithDefaults instantiates a new AddCustomerPaymentMethodRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCustomerPaymentMethodRequestDtoWithDefaults() *AddCustomerPaymentMethodRequestDto {
	this := AddCustomerPaymentMethodRequestDto{}
	return &this
}

// GetSuccessUrl returns the SuccessUrl field value
func (o *AddCustomerPaymentMethodRequestDto) GetSuccessUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuccessUrl
}

// GetSuccessUrlOk returns a tuple with the SuccessUrl field value
// and a boolean to check if the value has been set.
func (o *AddCustomerPaymentMethodRequestDto) GetSuccessUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessUrl, true
}

// SetSuccessUrl sets field value
func (o *AddCustomerPaymentMethodRequestDto) SetSuccessUrl(v string) {
	o.SuccessUrl = v
}

// GetCancelUrl returns the CancelUrl field value
func (o *AddCustomerPaymentMethodRequestDto) GetCancelUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value
// and a boolean to check if the value has been set.
func (o *AddCustomerPaymentMethodRequestDto) GetCancelUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancelUrl, true
}

// SetCancelUrl sets field value
func (o *AddCustomerPaymentMethodRequestDto) SetCancelUrl(v string) {
	o.CancelUrl = v
}

func (o AddCustomerPaymentMethodRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["successUrl"] = o.SuccessUrl
	}
	if true {
		toSerialize["cancelUrl"] = o.CancelUrl
	}
	return json.Marshal(toSerialize)
}

type NullableAddCustomerPaymentMethodRequestDto struct {
	value *AddCustomerPaymentMethodRequestDto
	isSet bool
}

func (v NullableAddCustomerPaymentMethodRequestDto) Get() *AddCustomerPaymentMethodRequestDto {
	return v.value
}

func (v *NullableAddCustomerPaymentMethodRequestDto) Set(val *AddCustomerPaymentMethodRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCustomerPaymentMethodRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCustomerPaymentMethodRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCustomerPaymentMethodRequestDto(val *AddCustomerPaymentMethodRequestDto) *NullableAddCustomerPaymentMethodRequestDto {
	return &NullableAddCustomerPaymentMethodRequestDto{value: val, isSet: true}
}

func (v NullableAddCustomerPaymentMethodRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCustomerPaymentMethodRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


