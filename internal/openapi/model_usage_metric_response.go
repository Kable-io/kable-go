/*
Kable API

The Kable API allows developers to manage **customers** and **API keys** and record **events** about their API.   ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.   ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to application/json.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included regardless whether the API request succeeded or failed. You can use this requestId to help with debugging or when contacting support regarding a specific API call.   ## API Keys  There are two types of API keys on Kable.  ### Kable Keys Kable Keys are the keys you, the Kable customer, use to interact with Kable. These keys help us ensure that only you are interacting with Kable on your behalf. You can find your keys on the Company page of the dashboard after you sign up.  Kable Keys should be included in every request to the Kable API. You must provide your client ID as the `KABLE-CLIENT-ID` header and your secret key as the `KABLE-CLIENT-SECRET` header on each request to Kable. If you are using a language-specific Kable library, you will initialize the SDK using these keys.  ### Customer Keys Customer Keys are the keys your customers use to interact with your API. Customer Keys are authenticated by Kable when a customer makes a request to your API if you use Kable's authentication services. Customers must provide their client ID (defined as `clientId` when you create the customer) as the `X-CLIENT-ID` header and their secret key as the `X-API-KEY` header on each request to your API that Kable is to authenticate.   ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of Kable is **v1**. 

API version: 1.2.1
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// UsageMetricResponse struct for UsageMetricResponse
type UsageMetricResponse struct {
	// Start of the period over which to query. Timestamps must be formatted as RFC 3339 strings like `2022-01-09T09:32:01Z`
	StartDate time.Time `json:"startDate"`
	// End of the period over which to query. Timestamps must be formatted as RFC 3339 strings like `2022-01-09T09:32:01Z`
	EndDate time.Time `json:"endDate"`
	Dimension *Dimension `json:"dimension,omitempty"`
	// When provided, query will consider only this customer. When `null`, query will consider all of your customers.
	ClientId *string `json:"clientId,omitempty"`
	Intervals []UsageMetricInterval `json:"intervals"`
}

// NewUsageMetricResponse instantiates a new UsageMetricResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageMetricResponse(startDate time.Time, endDate time.Time, intervals []UsageMetricInterval) *UsageMetricResponse {
	this := UsageMetricResponse{}
	this.StartDate = startDate
	this.EndDate = endDate
	this.Intervals = intervals
	return &this
}

// NewUsageMetricResponseWithDefaults instantiates a new UsageMetricResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageMetricResponseWithDefaults() *UsageMetricResponse {
	this := UsageMetricResponse{}
	return &this
}

// GetStartDate returns the StartDate field value
func (o *UsageMetricResponse) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *UsageMetricResponse) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *UsageMetricResponse) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *UsageMetricResponse) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *UsageMetricResponse) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *UsageMetricResponse) SetEndDate(v time.Time) {
	o.EndDate = v
}

// GetDimension returns the Dimension field value if set, zero value otherwise.
func (o *UsageMetricResponse) GetDimension() Dimension {
	if o == nil || o.Dimension == nil {
		var ret Dimension
		return ret
	}
	return *o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageMetricResponse) GetDimensionOk() (*Dimension, bool) {
	if o == nil || o.Dimension == nil {
		return nil, false
	}
	return o.Dimension, true
}

// HasDimension returns a boolean if a field has been set.
func (o *UsageMetricResponse) HasDimension() bool {
	if o != nil && o.Dimension != nil {
		return true
	}

	return false
}

// SetDimension gets a reference to the given Dimension and assigns it to the Dimension field.
func (o *UsageMetricResponse) SetDimension(v Dimension) {
	o.Dimension = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *UsageMetricResponse) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageMetricResponse) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *UsageMetricResponse) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *UsageMetricResponse) SetClientId(v string) {
	o.ClientId = &v
}

// GetIntervals returns the Intervals field value
func (o *UsageMetricResponse) GetIntervals() []UsageMetricInterval {
	if o == nil {
		var ret []UsageMetricInterval
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *UsageMetricResponse) GetIntervalsOk() ([]UsageMetricInterval, bool) {
	if o == nil {
		return nil, false
	}
	return o.Intervals, true
}

// SetIntervals sets field value
func (o *UsageMetricResponse) SetIntervals(v []UsageMetricInterval) {
	o.Intervals = v
}

func (o UsageMetricResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["startDate"] = o.StartDate
	}
	if true {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Dimension != nil {
		toSerialize["dimension"] = o.Dimension
	}
	if o.ClientId != nil {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["intervals"] = o.Intervals
	}
	return json.Marshal(toSerialize)
}

type NullableUsageMetricResponse struct {
	value *UsageMetricResponse
	isSet bool
}

func (v NullableUsageMetricResponse) Get() *UsageMetricResponse {
	return v.value
}

func (v *NullableUsageMetricResponse) Set(val *UsageMetricResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageMetricResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageMetricResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageMetricResponse(val *UsageMetricResponse) *NullableUsageMetricResponse {
	return &NullableUsageMetricResponse{value: val, isSet: true}
}

func (v NullableUsageMetricResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageMetricResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


