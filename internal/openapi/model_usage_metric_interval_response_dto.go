/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// UsageMetricIntervalResponseDto struct for UsageMetricIntervalResponseDto
type UsageMetricIntervalResponseDto struct {
	// Start of the interval over which usage was evaluated.
	IntervalStart time.Time `json:"intervalStart"`
	// End of the interval over which usage was evaluated.
	IntervalEnd time.Time `json:"intervalEnd"`
	Dimension UsageMetricIntervalResponseDtoDimension `json:"dimension"`
	// The customer for which usage was evaluated.
	ClientId *string `json:"clientId,omitempty"`
	// The usage metric value for the given dimension and interval.
	Total float32 `json:"total"`
}

// NewUsageMetricIntervalResponseDto instantiates a new UsageMetricIntervalResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageMetricIntervalResponseDto(intervalStart time.Time, intervalEnd time.Time, dimension UsageMetricIntervalResponseDtoDimension, total float32) *UsageMetricIntervalResponseDto {
	this := UsageMetricIntervalResponseDto{}
	this.IntervalStart = intervalStart
	this.IntervalEnd = intervalEnd
	this.Dimension = dimension
	this.Total = total
	return &this
}

// NewUsageMetricIntervalResponseDtoWithDefaults instantiates a new UsageMetricIntervalResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageMetricIntervalResponseDtoWithDefaults() *UsageMetricIntervalResponseDto {
	this := UsageMetricIntervalResponseDto{}
	return &this
}

// GetIntervalStart returns the IntervalStart field value
func (o *UsageMetricIntervalResponseDto) GetIntervalStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IntervalStart
}

// GetIntervalStartOk returns a tuple with the IntervalStart field value
// and a boolean to check if the value has been set.
func (o *UsageMetricIntervalResponseDto) GetIntervalStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalStart, true
}

// SetIntervalStart sets field value
func (o *UsageMetricIntervalResponseDto) SetIntervalStart(v time.Time) {
	o.IntervalStart = v
}

// GetIntervalEnd returns the IntervalEnd field value
func (o *UsageMetricIntervalResponseDto) GetIntervalEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IntervalEnd
}

// GetIntervalEndOk returns a tuple with the IntervalEnd field value
// and a boolean to check if the value has been set.
func (o *UsageMetricIntervalResponseDto) GetIntervalEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalEnd, true
}

// SetIntervalEnd sets field value
func (o *UsageMetricIntervalResponseDto) SetIntervalEnd(v time.Time) {
	o.IntervalEnd = v
}

// GetDimension returns the Dimension field value
func (o *UsageMetricIntervalResponseDto) GetDimension() UsageMetricIntervalResponseDtoDimension {
	if o == nil {
		var ret UsageMetricIntervalResponseDtoDimension
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *UsageMetricIntervalResponseDto) GetDimensionOk() (*UsageMetricIntervalResponseDtoDimension, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *UsageMetricIntervalResponseDto) SetDimension(v UsageMetricIntervalResponseDtoDimension) {
	o.Dimension = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *UsageMetricIntervalResponseDto) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageMetricIntervalResponseDto) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *UsageMetricIntervalResponseDto) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *UsageMetricIntervalResponseDto) SetClientId(v string) {
	o.ClientId = &v
}

// GetTotal returns the Total field value
func (o *UsageMetricIntervalResponseDto) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *UsageMetricIntervalResponseDto) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *UsageMetricIntervalResponseDto) SetTotal(v float32) {
	o.Total = v
}

func (o UsageMetricIntervalResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["intervalStart"] = o.IntervalStart
	}
	if true {
		toSerialize["intervalEnd"] = o.IntervalEnd
	}
	if true {
		toSerialize["dimension"] = o.Dimension
	}
	if o.ClientId != nil {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableUsageMetricIntervalResponseDto struct {
	value *UsageMetricIntervalResponseDto
	isSet bool
}

func (v NullableUsageMetricIntervalResponseDto) Get() *UsageMetricIntervalResponseDto {
	return v.value
}

func (v *NullableUsageMetricIntervalResponseDto) Set(val *UsageMetricIntervalResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageMetricIntervalResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageMetricIntervalResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageMetricIntervalResponseDto(val *UsageMetricIntervalResponseDto) *NullableUsageMetricIntervalResponseDto {
	return &NullableUsageMetricIntervalResponseDto{value: val, isSet: true}
}

func (v NullableUsageMetricIntervalResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageMetricIntervalResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


