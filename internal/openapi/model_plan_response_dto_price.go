/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlanResponseDtoPrice The monthly price of the plan.
type PlanResponseDtoPrice struct {
	// Three-letter ISO currency code
	Currency string `json:"currency"`
	// The tiered pricing of the plan
	Tiers []PriceTierResponseDto `json:"tiers"`
}

// NewPlanResponseDtoPrice instantiates a new PlanResponseDtoPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanResponseDtoPrice(currency string, tiers []PriceTierResponseDto) *PlanResponseDtoPrice {
	this := PlanResponseDtoPrice{}
	this.Currency = currency
	this.Tiers = tiers
	return &this
}

// NewPlanResponseDtoPriceWithDefaults instantiates a new PlanResponseDtoPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanResponseDtoPriceWithDefaults() *PlanResponseDtoPrice {
	this := PlanResponseDtoPrice{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *PlanResponseDtoPrice) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PlanResponseDtoPrice) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PlanResponseDtoPrice) SetCurrency(v string) {
	o.Currency = v
}

// GetTiers returns the Tiers field value
func (o *PlanResponseDtoPrice) GetTiers() []PriceTierResponseDto {
	if o == nil {
		var ret []PriceTierResponseDto
		return ret
	}

	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value
// and a boolean to check if the value has been set.
func (o *PlanResponseDtoPrice) GetTiersOk() ([]PriceTierResponseDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tiers, true
}

// SetTiers sets field value
func (o *PlanResponseDtoPrice) SetTiers(v []PriceTierResponseDto) {
	o.Tiers = v
}

func (o PlanResponseDtoPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["tiers"] = o.Tiers
	}
	return json.Marshal(toSerialize)
}

type NullablePlanResponseDtoPrice struct {
	value *PlanResponseDtoPrice
	isSet bool
}

func (v NullablePlanResponseDtoPrice) Get() *PlanResponseDtoPrice {
	return v.value
}

func (v *NullablePlanResponseDtoPrice) Set(val *PlanResponseDtoPrice) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanResponseDtoPrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanResponseDtoPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanResponseDtoPrice(val *PlanResponseDtoPrice) *NullablePlanResponseDtoPrice {
	return &NullablePlanResponseDtoPrice{value: val, isSet: true}
}

func (v NullablePlanResponseDtoPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanResponseDtoPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


