/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// UsageMetricResponseDto struct for UsageMetricResponseDto
type UsageMetricResponseDto struct {
	// Start of the period over which usage was evaluated.
	StartDate time.Time `json:"startDate"`
	// End of the period over which usage was evaluated.
	EndDate time.Time `json:"endDate"`
	Dimension UsageMetricIntervalResponseDtoDimension `json:"dimension"`
	// The customer for which usage was evaluated.
	ClientId *string `json:"clientId,omitempty"`
	// The usage metric value for the given dimension and interval.
	Total float32 `json:"total"`
	// Time-series intervals over which usage was evaluated.
	Intervals []UsageMetricIntervalResponseDto `json:"intervals"`
}

// NewUsageMetricResponseDto instantiates a new UsageMetricResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageMetricResponseDto(startDate time.Time, endDate time.Time, dimension UsageMetricIntervalResponseDtoDimension, total float32, intervals []UsageMetricIntervalResponseDto) *UsageMetricResponseDto {
	this := UsageMetricResponseDto{}
	this.StartDate = startDate
	this.EndDate = endDate
	this.Dimension = dimension
	this.Total = total
	this.Intervals = intervals
	return &this
}

// NewUsageMetricResponseDtoWithDefaults instantiates a new UsageMetricResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageMetricResponseDtoWithDefaults() *UsageMetricResponseDto {
	this := UsageMetricResponseDto{}
	return &this
}

// GetStartDate returns the StartDate field value
func (o *UsageMetricResponseDto) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *UsageMetricResponseDto) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *UsageMetricResponseDto) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *UsageMetricResponseDto) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *UsageMetricResponseDto) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *UsageMetricResponseDto) SetEndDate(v time.Time) {
	o.EndDate = v
}

// GetDimension returns the Dimension field value
func (o *UsageMetricResponseDto) GetDimension() UsageMetricIntervalResponseDtoDimension {
	if o == nil {
		var ret UsageMetricIntervalResponseDtoDimension
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *UsageMetricResponseDto) GetDimensionOk() (*UsageMetricIntervalResponseDtoDimension, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *UsageMetricResponseDto) SetDimension(v UsageMetricIntervalResponseDtoDimension) {
	o.Dimension = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *UsageMetricResponseDto) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageMetricResponseDto) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *UsageMetricResponseDto) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *UsageMetricResponseDto) SetClientId(v string) {
	o.ClientId = &v
}

// GetTotal returns the Total field value
func (o *UsageMetricResponseDto) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *UsageMetricResponseDto) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *UsageMetricResponseDto) SetTotal(v float32) {
	o.Total = v
}

// GetIntervals returns the Intervals field value
func (o *UsageMetricResponseDto) GetIntervals() []UsageMetricIntervalResponseDto {
	if o == nil {
		var ret []UsageMetricIntervalResponseDto
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *UsageMetricResponseDto) GetIntervalsOk() ([]UsageMetricIntervalResponseDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Intervals, true
}

// SetIntervals sets field value
func (o *UsageMetricResponseDto) SetIntervals(v []UsageMetricIntervalResponseDto) {
	o.Intervals = v
}

func (o UsageMetricResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["startDate"] = o.StartDate
	}
	if true {
		toSerialize["endDate"] = o.EndDate
	}
	if true {
		toSerialize["dimension"] = o.Dimension
	}
	if o.ClientId != nil {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["intervals"] = o.Intervals
	}
	return json.Marshal(toSerialize)
}

type NullableUsageMetricResponseDto struct {
	value *UsageMetricResponseDto
	isSet bool
}

func (v NullableUsageMetricResponseDto) Get() *UsageMetricResponseDto {
	return v.value
}

func (v *NullableUsageMetricResponseDto) Set(val *UsageMetricResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageMetricResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageMetricResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageMetricResponseDto(val *UsageMetricResponseDto) *NullableUsageMetricResponseDto {
	return &NullableUsageMetricResponseDto{value: val, isSet: true}
}

func (v NullableUsageMetricResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageMetricResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


