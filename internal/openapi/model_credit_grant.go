/*
Kable API

The Kable API allows developers to manage **customers** and **API keys** and record **events** about their API.   ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.   ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to application/json.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included regardless whether the API request succeeded or failed. You can use this requestId to help with debugging or when contacting support regarding a specific API call.   ## API Keys  There are two types of API keys on Kable.  ### Kable Keys Kable Keys are the keys you, the Kable customer, use to interact with Kable. These keys help us ensure that only you are interacting with Kable on your behalf. You can find your keys on the Company page of the dashboard after you sign up.  Kable Keys should be included in every request to the Kable API. You must provide your client ID as the `KABLE-CLIENT-ID` header and your secret key as the `KABLE-CLIENT-SECRET` header on each request to Kable. If you are using a language-specific Kable library, you will initialize the SDK using these keys.  ### Customer Keys Customer Keys are the keys your customers use to interact with your API. Customer Keys are authenticated by Kable when a customer makes a request to your API if you use Kable's authentication services. Customers must provide their client ID (defined as `clientId` when you create the customer) as the `X-CLIENT-ID` header and their secret key as the `X-API-KEY` header on each request to your API that Kable is to authenticate.   ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of Kable is **v1**. 

API version: 1.2.1
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreditGrant struct for CreditGrant
type CreditGrant struct {
	// The identifier of the credit grant created on Kable.
	CreditGrantId string `json:"creditGrantId"`
	// The number of credits created in the grant.
	GrantAmount float32 `json:"grantAmount"`
	// The available, non-consumed balance remaining in the grant.
	BalanceAmount float32 `json:"balanceAmount"`
	// The amount paid (in the specified `currency`), if any, for the credit grant.
	PaidAmount *float32 `json:"paidAmount,omitempty"`
	// Three-letter currency code.
	Currency string `json:"currency"`
}

// NewCreditGrant instantiates a new CreditGrant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditGrant(creditGrantId string, grantAmount float32, balanceAmount float32, currency string) *CreditGrant {
	this := CreditGrant{}
	this.CreditGrantId = creditGrantId
	this.GrantAmount = grantAmount
	this.BalanceAmount = balanceAmount
	this.Currency = currency
	return &this
}

// NewCreditGrantWithDefaults instantiates a new CreditGrant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditGrantWithDefaults() *CreditGrant {
	this := CreditGrant{}
	return &this
}

// GetCreditGrantId returns the CreditGrantId field value
func (o *CreditGrant) GetCreditGrantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreditGrantId
}

// GetCreditGrantIdOk returns a tuple with the CreditGrantId field value
// and a boolean to check if the value has been set.
func (o *CreditGrant) GetCreditGrantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditGrantId, true
}

// SetCreditGrantId sets field value
func (o *CreditGrant) SetCreditGrantId(v string) {
	o.CreditGrantId = v
}

// GetGrantAmount returns the GrantAmount field value
func (o *CreditGrant) GetGrantAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.GrantAmount
}

// GetGrantAmountOk returns a tuple with the GrantAmount field value
// and a boolean to check if the value has been set.
func (o *CreditGrant) GetGrantAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantAmount, true
}

// SetGrantAmount sets field value
func (o *CreditGrant) SetGrantAmount(v float32) {
	o.GrantAmount = v
}

// GetBalanceAmount returns the BalanceAmount field value
func (o *CreditGrant) GetBalanceAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BalanceAmount
}

// GetBalanceAmountOk returns a tuple with the BalanceAmount field value
// and a boolean to check if the value has been set.
func (o *CreditGrant) GetBalanceAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BalanceAmount, true
}

// SetBalanceAmount sets field value
func (o *CreditGrant) SetBalanceAmount(v float32) {
	o.BalanceAmount = v
}

// GetPaidAmount returns the PaidAmount field value if set, zero value otherwise.
func (o *CreditGrant) GetPaidAmount() float32 {
	if o == nil || o.PaidAmount == nil {
		var ret float32
		return ret
	}
	return *o.PaidAmount
}

// GetPaidAmountOk returns a tuple with the PaidAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditGrant) GetPaidAmountOk() (*float32, bool) {
	if o == nil || o.PaidAmount == nil {
		return nil, false
	}
	return o.PaidAmount, true
}

// HasPaidAmount returns a boolean if a field has been set.
func (o *CreditGrant) HasPaidAmount() bool {
	if o != nil && o.PaidAmount != nil {
		return true
	}

	return false
}

// SetPaidAmount gets a reference to the given float32 and assigns it to the PaidAmount field.
func (o *CreditGrant) SetPaidAmount(v float32) {
	o.PaidAmount = &v
}

// GetCurrency returns the Currency field value
func (o *CreditGrant) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CreditGrant) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CreditGrant) SetCurrency(v string) {
	o.Currency = v
}

func (o CreditGrant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["creditGrantId"] = o.CreditGrantId
	}
	if true {
		toSerialize["grantAmount"] = o.GrantAmount
	}
	if true {
		toSerialize["balanceAmount"] = o.BalanceAmount
	}
	if o.PaidAmount != nil {
		toSerialize["paidAmount"] = o.PaidAmount
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableCreditGrant struct {
	value *CreditGrant
	isSet bool
}

func (v NullableCreditGrant) Get() *CreditGrant {
	return v.value
}

func (v *NullableCreditGrant) Set(val *CreditGrant) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditGrant) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditGrant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditGrant(val *CreditGrant) *NullableCreditGrant {
	return &NullableCreditGrant{value: val, isSet: true}
}

func (v NullableCreditGrant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditGrant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


