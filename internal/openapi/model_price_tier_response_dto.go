/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PriceTierResponseDto struct for PriceTierResponseDto
type PriceTierResponseDto struct {
	// The tier price type
	Type string `json:"type"`
	// The tier price amount
	Amount float32 `json:"amount"`
	// The tier start amount
	Start *float32 `json:"start,omitempty"`
	// The tier finish amount (infinity indicated by -1)
	Finish *float32 `json:"finish,omitempty"`
	// The tier package size (only applicable to package price tiers)
	PackageSize *float32 `json:"packageSize,omitempty"`
}

// NewPriceTierResponseDto instantiates a new PriceTierResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceTierResponseDto(type_ string, amount float32) *PriceTierResponseDto {
	this := PriceTierResponseDto{}
	this.Type = type_
	this.Amount = amount
	return &this
}

// NewPriceTierResponseDtoWithDefaults instantiates a new PriceTierResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceTierResponseDtoWithDefaults() *PriceTierResponseDto {
	this := PriceTierResponseDto{}
	return &this
}

// GetType returns the Type field value
func (o *PriceTierResponseDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PriceTierResponseDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PriceTierResponseDto) SetType(v string) {
	o.Type = v
}

// GetAmount returns the Amount field value
func (o *PriceTierResponseDto) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PriceTierResponseDto) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PriceTierResponseDto) SetAmount(v float32) {
	o.Amount = v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *PriceTierResponseDto) GetStart() float32 {
	if o == nil || o.Start == nil {
		var ret float32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceTierResponseDto) GetStartOk() (*float32, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *PriceTierResponseDto) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given float32 and assigns it to the Start field.
func (o *PriceTierResponseDto) SetStart(v float32) {
	o.Start = &v
}

// GetFinish returns the Finish field value if set, zero value otherwise.
func (o *PriceTierResponseDto) GetFinish() float32 {
	if o == nil || o.Finish == nil {
		var ret float32
		return ret
	}
	return *o.Finish
}

// GetFinishOk returns a tuple with the Finish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceTierResponseDto) GetFinishOk() (*float32, bool) {
	if o == nil || o.Finish == nil {
		return nil, false
	}
	return o.Finish, true
}

// HasFinish returns a boolean if a field has been set.
func (o *PriceTierResponseDto) HasFinish() bool {
	if o != nil && o.Finish != nil {
		return true
	}

	return false
}

// SetFinish gets a reference to the given float32 and assigns it to the Finish field.
func (o *PriceTierResponseDto) SetFinish(v float32) {
	o.Finish = &v
}

// GetPackageSize returns the PackageSize field value if set, zero value otherwise.
func (o *PriceTierResponseDto) GetPackageSize() float32 {
	if o == nil || o.PackageSize == nil {
		var ret float32
		return ret
	}
	return *o.PackageSize
}

// GetPackageSizeOk returns a tuple with the PackageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceTierResponseDto) GetPackageSizeOk() (*float32, bool) {
	if o == nil || o.PackageSize == nil {
		return nil, false
	}
	return o.PackageSize, true
}

// HasPackageSize returns a boolean if a field has been set.
func (o *PriceTierResponseDto) HasPackageSize() bool {
	if o != nil && o.PackageSize != nil {
		return true
	}

	return false
}

// SetPackageSize gets a reference to the given float32 and assigns it to the PackageSize field.
func (o *PriceTierResponseDto) SetPackageSize(v float32) {
	o.PackageSize = &v
}

func (o PriceTierResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.Finish != nil {
		toSerialize["finish"] = o.Finish
	}
	if o.PackageSize != nil {
		toSerialize["packageSize"] = o.PackageSize
	}
	return json.Marshal(toSerialize)
}

type NullablePriceTierResponseDto struct {
	value *PriceTierResponseDto
	isSet bool
}

func (v NullablePriceTierResponseDto) Get() *PriceTierResponseDto {
	return v.value
}

func (v *NullablePriceTierResponseDto) Set(val *PriceTierResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceTierResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceTierResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceTierResponseDto(val *PriceTierResponseDto) *NullablePriceTierResponseDto {
	return &NullablePriceTierResponseDto{value: val, isSet: true}
}

func (v NullablePriceTierResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceTierResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


