/*
Kable API

The Kable API allows developers to manage **customers** and **API keys** and record **events** about their API.   ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.   ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to application/json.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included regardless whether the API request succeeded or failed. You can use this requestId to help with debugging or when contacting support regarding a specific API call.   ## API Keys  There are two types of API keys on Kable.  ### Kable Keys Kable Keys are the keys you, the Kable customer, use to interact with Kable. These keys help us ensure that only you are interacting with Kable on your behalf. You can find your keys on the Company page of the dashboard after you sign up.  Kable Keys should be included in every request to the Kable API. You must provide your client ID as the `KABLE-CLIENT-ID` header and your secret key as the `KABLE-CLIENT-SECRET` header on each request to Kable. If you are using a language-specific Kable library, you will initialize the SDK using these keys.  ### Customer Keys Customer Keys are the keys your customers use to interact with your API. Customer Keys are authenticated by Kable when a customer makes a request to your API if you use Kable's authentication services. Customers must provide their client ID (defined as `clientId` when you create the customer) as the `X-CLIENT-ID` header and their secret key as the `X-API-KEY` header on each request to your API that Kable is to authenticate.   ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of Kable is **v1**. 

API version: 1.2.1
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateCustomerRequest struct for CreateCustomerRequest
type CreateCustomerRequest struct {
	// A unique identifier for the customer, defined by you. This usually corresponds to your own internal unique identifier for customers, and is the identifier by which Kable attributes customer usage.
	ClientId string `json:"clientId"`
	// The name of the customer, visible on dashboards, invoices, and reports.
	CompanyName string `json:"companyName"`
	Currency *string `json:"currency,omitempty"`
	// The customer's Stripe `customer_id`, if any, for automatic invoice processing through Stripe.
	StripeCustomerId *string `json:"stripeCustomerId,omitempty"`
	// A collection of plans to which this customer is currently subscribed.
	PlanIds []string `json:"planIds,omitempty"`
}

// NewCreateCustomerRequest instantiates a new CreateCustomerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCustomerRequest(clientId string, companyName string) *CreateCustomerRequest {
	this := CreateCustomerRequest{}
	this.ClientId = clientId
	this.CompanyName = companyName
	return &this
}

// NewCreateCustomerRequestWithDefaults instantiates a new CreateCustomerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCustomerRequestWithDefaults() *CreateCustomerRequest {
	this := CreateCustomerRequest{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *CreateCustomerRequest) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequest) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *CreateCustomerRequest) SetClientId(v string) {
	o.ClientId = v
}

// GetCompanyName returns the CompanyName field value
func (o *CreateCustomerRequest) GetCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequest) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyName, true
}

// SetCompanyName sets field value
func (o *CreateCustomerRequest) SetCompanyName(v string) {
	o.CompanyName = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreateCustomerRequest) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequest) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreateCustomerRequest) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CreateCustomerRequest) SetCurrency(v string) {
	o.Currency = &v
}

// GetStripeCustomerId returns the StripeCustomerId field value if set, zero value otherwise.
func (o *CreateCustomerRequest) GetStripeCustomerId() string {
	if o == nil || o.StripeCustomerId == nil {
		var ret string
		return ret
	}
	return *o.StripeCustomerId
}

// GetStripeCustomerIdOk returns a tuple with the StripeCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequest) GetStripeCustomerIdOk() (*string, bool) {
	if o == nil || o.StripeCustomerId == nil {
		return nil, false
	}
	return o.StripeCustomerId, true
}

// HasStripeCustomerId returns a boolean if a field has been set.
func (o *CreateCustomerRequest) HasStripeCustomerId() bool {
	if o != nil && o.StripeCustomerId != nil {
		return true
	}

	return false
}

// SetStripeCustomerId gets a reference to the given string and assigns it to the StripeCustomerId field.
func (o *CreateCustomerRequest) SetStripeCustomerId(v string) {
	o.StripeCustomerId = &v
}

// GetPlanIds returns the PlanIds field value if set, zero value otherwise.
func (o *CreateCustomerRequest) GetPlanIds() []string {
	if o == nil || o.PlanIds == nil {
		var ret []string
		return ret
	}
	return o.PlanIds
}

// GetPlanIdsOk returns a tuple with the PlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomerRequest) GetPlanIdsOk() ([]string, bool) {
	if o == nil || o.PlanIds == nil {
		return nil, false
	}
	return o.PlanIds, true
}

// HasPlanIds returns a boolean if a field has been set.
func (o *CreateCustomerRequest) HasPlanIds() bool {
	if o != nil && o.PlanIds != nil {
		return true
	}

	return false
}

// SetPlanIds gets a reference to the given []string and assigns it to the PlanIds field.
func (o *CreateCustomerRequest) SetPlanIds(v []string) {
	o.PlanIds = v
}

func (o CreateCustomerRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["companyName"] = o.CompanyName
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.StripeCustomerId != nil {
		toSerialize["stripeCustomerId"] = o.StripeCustomerId
	}
	if o.PlanIds != nil {
		toSerialize["planIds"] = o.PlanIds
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCustomerRequest struct {
	value *CreateCustomerRequest
	isSet bool
}

func (v NullableCreateCustomerRequest) Get() *CreateCustomerRequest {
	return v.value
}

func (v *NullableCreateCustomerRequest) Set(val *CreateCustomerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCustomerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCustomerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCustomerRequest(val *CreateCustomerRequest) *NullableCreateCustomerRequest {
	return &NullableCreateCustomerRequest{value: val, isSet: true}
}

func (v NullableCreateCustomerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCustomerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


