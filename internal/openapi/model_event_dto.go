/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// EventDto struct for EventDto
type EventDto struct {
	// A unique identifier for the customer, defined by you.
	ClientId string `json:"clientId"`
	// When the event occurred. Timestamps must be formatted as RFC-3339 strings like `2022-01-09T09:32:01Z`.
	Timestamp time.Time `json:"timestamp"`
	// `data` is a JSON-formatted object containing key-value pairs of information to be tracked by Kable. The keys provided in the `data` JSON correspond to the Dimensions you've defined on Kable.  When using a Kable library, you must **always** include a `clientId` in the `record` payload so that Kable can accurately attribute events to your customers.
	Data map[string]interface{} `json:"data,omitempty"`
	// A unique identifier for the event, used as an idempotency key for event deduplication.
	TransactionId *string `json:"transactionId,omitempty"`
}

// NewEventDto instantiates a new EventDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDto(clientId string, timestamp time.Time) *EventDto {
	this := EventDto{}
	this.ClientId = clientId
	this.Timestamp = timestamp
	return &this
}

// NewEventDtoWithDefaults instantiates a new EventDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDtoWithDefaults() *EventDto {
	this := EventDto{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *EventDto) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *EventDto) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *EventDto) SetClientId(v string) {
	o.ClientId = v
}

// GetTimestamp returns the Timestamp field value
func (o *EventDto) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EventDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EventDto) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventDto) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDto) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventDto) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *EventDto) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *EventDto) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDto) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *EventDto) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *EventDto) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o EventDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.TransactionId != nil {
		toSerialize["transactionId"] = o.TransactionId
	}
	return json.Marshal(toSerialize)
}

type NullableEventDto struct {
	value *EventDto
	isSet bool
}

func (v NullableEventDto) Get() *EventDto {
	return v.value
}

func (v *NullableEventDto) Set(val *EventDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDto(val *EventDto) *NullableEventDto {
	return &NullableEventDto{value: val, isSet: true}
}

func (v NullableEventDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


