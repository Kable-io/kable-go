/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CustomerPlanResponseDto struct for CustomerPlanResponseDto
type CustomerPlanResponseDto struct {
	// A Kable-defined identifier for the plan.
	PlanId string `json:"planId"`
	// A human-readable name for the plan, visible on dashboards, invoices, and reports.
	Name string `json:"name"`
	// An identifier for the plan as defined by your API.
	ExternalId *string `json:"externalId,omitempty"`
	// A human-readable description for the plan, visible on dashboards, invoices, and reports.
	Description *string `json:"description,omitempty"`
	// An additional identifier for the plan, defined by you, that is *not* visible to customers. If you have different *Monthly Active Users Plan*s for different cohorts of customers, this is a useful place to differentiate those.
	Nickname *string `json:"nickname,omitempty"`
	// The type of plan.
	Type string `json:"type"`
	// An identifier of the dimension along which usage is aggregated in this plan, relevant only for usage plans.
	DimensionId string `json:"dimensionId"`
	// The aggregation along which usage metrics are calculated in this plan, relevant only for usage plans.
	Aggregation *string `json:"aggregation,omitempty"`
	// The billing interval for the plan.
	Interval string `json:"interval"`
	// Arbitrary key-value pairs to attach to the object that can be useful for controlling functionality inside your API.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Price PlanResponseDtoPrice `json:"price"`
	// The entitlements associated with this plan.
	Entitlements []ResourceEntitlementResponseDto `json:"entitlements"`
	// Date at which entity was first created
	Created time.Time `json:"created"`
	// Date at which entity was last modified
	Modified time.Time `json:"modified"`
	AddedDate time.Time `json:"addedDate"`
	EndedDate *time.Time `json:"endedDate,omitempty"`
	PeriodStartDate *time.Time `json:"periodStartDate,omitempty"`
	PeriodEndDate *time.Time `json:"periodEndDate,omitempty"`
}

// NewCustomerPlanResponseDto instantiates a new CustomerPlanResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerPlanResponseDto(planId string, name string, type_ string, dimensionId string, interval string, price PlanResponseDtoPrice, entitlements []ResourceEntitlementResponseDto, created time.Time, modified time.Time, addedDate time.Time) *CustomerPlanResponseDto {
	this := CustomerPlanResponseDto{}
	this.PlanId = planId
	this.Name = name
	this.Type = type_
	this.DimensionId = dimensionId
	this.Interval = interval
	this.Price = price
	this.Entitlements = entitlements
	this.Created = created
	this.Modified = modified
	this.AddedDate = addedDate
	return &this
}

// NewCustomerPlanResponseDtoWithDefaults instantiates a new CustomerPlanResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerPlanResponseDtoWithDefaults() *CustomerPlanResponseDto {
	this := CustomerPlanResponseDto{}
	return &this
}

// GetPlanId returns the PlanId field value
func (o *CustomerPlanResponseDto) GetPlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanId, true
}

// SetPlanId sets field value
func (o *CustomerPlanResponseDto) SetPlanId(v string) {
	o.PlanId = v
}

// GetName returns the Name field value
func (o *CustomerPlanResponseDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomerPlanResponseDto) SetName(v string) {
	o.Name = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CustomerPlanResponseDto) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CustomerPlanResponseDto) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CustomerPlanResponseDto) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomerPlanResponseDto) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomerPlanResponseDto) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomerPlanResponseDto) SetDescription(v string) {
	o.Description = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *CustomerPlanResponseDto) GetNickname() string {
	if o == nil || o.Nickname == nil {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetNicknameOk() (*string, bool) {
	if o == nil || o.Nickname == nil {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *CustomerPlanResponseDto) HasNickname() bool {
	if o != nil && o.Nickname != nil {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *CustomerPlanResponseDto) SetNickname(v string) {
	o.Nickname = &v
}

// GetType returns the Type field value
func (o *CustomerPlanResponseDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CustomerPlanResponseDto) SetType(v string) {
	o.Type = v
}

// GetDimensionId returns the DimensionId field value
func (o *CustomerPlanResponseDto) GetDimensionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DimensionId
}

// GetDimensionIdOk returns a tuple with the DimensionId field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetDimensionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DimensionId, true
}

// SetDimensionId sets field value
func (o *CustomerPlanResponseDto) SetDimensionId(v string) {
	o.DimensionId = v
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *CustomerPlanResponseDto) GetAggregation() string {
	if o == nil || o.Aggregation == nil {
		var ret string
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetAggregationOk() (*string, bool) {
	if o == nil || o.Aggregation == nil {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *CustomerPlanResponseDto) HasAggregation() bool {
	if o != nil && o.Aggregation != nil {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given string and assigns it to the Aggregation field.
func (o *CustomerPlanResponseDto) SetAggregation(v string) {
	o.Aggregation = &v
}

// GetInterval returns the Interval field value
func (o *CustomerPlanResponseDto) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *CustomerPlanResponseDto) SetInterval(v string) {
	o.Interval = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CustomerPlanResponseDto) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CustomerPlanResponseDto) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CustomerPlanResponseDto) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPrice returns the Price field value
func (o *CustomerPlanResponseDto) GetPrice() PlanResponseDtoPrice {
	if o == nil {
		var ret PlanResponseDtoPrice
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetPriceOk() (*PlanResponseDtoPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *CustomerPlanResponseDto) SetPrice(v PlanResponseDtoPrice) {
	o.Price = v
}

// GetEntitlements returns the Entitlements field value
func (o *CustomerPlanResponseDto) GetEntitlements() []ResourceEntitlementResponseDto {
	if o == nil {
		var ret []ResourceEntitlementResponseDto
		return ret
	}

	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetEntitlementsOk() ([]ResourceEntitlementResponseDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entitlements, true
}

// SetEntitlements sets field value
func (o *CustomerPlanResponseDto) SetEntitlements(v []ResourceEntitlementResponseDto) {
	o.Entitlements = v
}

// GetCreated returns the Created field value
func (o *CustomerPlanResponseDto) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CustomerPlanResponseDto) SetCreated(v time.Time) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *CustomerPlanResponseDto) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *CustomerPlanResponseDto) SetModified(v time.Time) {
	o.Modified = v
}

// GetAddedDate returns the AddedDate field value
func (o *CustomerPlanResponseDto) GetAddedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AddedDate
}

// GetAddedDateOk returns a tuple with the AddedDate field value
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetAddedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddedDate, true
}

// SetAddedDate sets field value
func (o *CustomerPlanResponseDto) SetAddedDate(v time.Time) {
	o.AddedDate = v
}

// GetEndedDate returns the EndedDate field value if set, zero value otherwise.
func (o *CustomerPlanResponseDto) GetEndedDate() time.Time {
	if o == nil || o.EndedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndedDate
}

// GetEndedDateOk returns a tuple with the EndedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetEndedDateOk() (*time.Time, bool) {
	if o == nil || o.EndedDate == nil {
		return nil, false
	}
	return o.EndedDate, true
}

// HasEndedDate returns a boolean if a field has been set.
func (o *CustomerPlanResponseDto) HasEndedDate() bool {
	if o != nil && o.EndedDate != nil {
		return true
	}

	return false
}

// SetEndedDate gets a reference to the given time.Time and assigns it to the EndedDate field.
func (o *CustomerPlanResponseDto) SetEndedDate(v time.Time) {
	o.EndedDate = &v
}

// GetPeriodStartDate returns the PeriodStartDate field value if set, zero value otherwise.
func (o *CustomerPlanResponseDto) GetPeriodStartDate() time.Time {
	if o == nil || o.PeriodStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.PeriodStartDate
}

// GetPeriodStartDateOk returns a tuple with the PeriodStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetPeriodStartDateOk() (*time.Time, bool) {
	if o == nil || o.PeriodStartDate == nil {
		return nil, false
	}
	return o.PeriodStartDate, true
}

// HasPeriodStartDate returns a boolean if a field has been set.
func (o *CustomerPlanResponseDto) HasPeriodStartDate() bool {
	if o != nil && o.PeriodStartDate != nil {
		return true
	}

	return false
}

// SetPeriodStartDate gets a reference to the given time.Time and assigns it to the PeriodStartDate field.
func (o *CustomerPlanResponseDto) SetPeriodStartDate(v time.Time) {
	o.PeriodStartDate = &v
}

// GetPeriodEndDate returns the PeriodEndDate field value if set, zero value otherwise.
func (o *CustomerPlanResponseDto) GetPeriodEndDate() time.Time {
	if o == nil || o.PeriodEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.PeriodEndDate
}

// GetPeriodEndDateOk returns a tuple with the PeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerPlanResponseDto) GetPeriodEndDateOk() (*time.Time, bool) {
	if o == nil || o.PeriodEndDate == nil {
		return nil, false
	}
	return o.PeriodEndDate, true
}

// HasPeriodEndDate returns a boolean if a field has been set.
func (o *CustomerPlanResponseDto) HasPeriodEndDate() bool {
	if o != nil && o.PeriodEndDate != nil {
		return true
	}

	return false
}

// SetPeriodEndDate gets a reference to the given time.Time and assigns it to the PeriodEndDate field.
func (o *CustomerPlanResponseDto) SetPeriodEndDate(v time.Time) {
	o.PeriodEndDate = &v
}

func (o CustomerPlanResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["planId"] = o.PlanId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Nickname != nil {
		toSerialize["nickname"] = o.Nickname
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["dimensionId"] = o.DimensionId
	}
	if o.Aggregation != nil {
		toSerialize["aggregation"] = o.Aggregation
	}
	if true {
		toSerialize["interval"] = o.Interval
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["entitlements"] = o.Entitlements
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["modified"] = o.Modified
	}
	if true {
		toSerialize["addedDate"] = o.AddedDate
	}
	if o.EndedDate != nil {
		toSerialize["endedDate"] = o.EndedDate
	}
	if o.PeriodStartDate != nil {
		toSerialize["periodStartDate"] = o.PeriodStartDate
	}
	if o.PeriodEndDate != nil {
		toSerialize["periodEndDate"] = o.PeriodEndDate
	}
	return json.Marshal(toSerialize)
}

type NullableCustomerPlanResponseDto struct {
	value *CustomerPlanResponseDto
	isSet bool
}

func (v NullableCustomerPlanResponseDto) Get() *CustomerPlanResponseDto {
	return v.value
}

func (v *NullableCustomerPlanResponseDto) Set(val *CustomerPlanResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerPlanResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerPlanResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerPlanResponseDto(val *CustomerPlanResponseDto) *NullableCustomerPlanResponseDto {
	return &NullableCustomerPlanResponseDto{value: val, isSet: true}
}

func (v NullableCustomerPlanResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerPlanResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


