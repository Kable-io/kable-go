/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PlanEntitlementResponseDto struct for PlanEntitlementResponseDto
type PlanEntitlementResponseDto struct {
	// The name of the entitlement
	Name string `json:"name"`
	// A Kable-defined identifier for the entitlement.
	EntitlementId string `json:"entitlementId"`
	// An identifier for the entitlement as defined by your API.
	ExternalId string `json:"externalId"`
	// The type of data supported by the entitlement.
	Datatype string `json:"datatype"`
	// A description of the entitlement.
	Description string `json:"description"`
	// Date at which entity was first created
	Created time.Time `json:"created"`
	// Date at which entity was last modified
	Modified time.Time `json:"modified"`
	// The value of the entitlement.
	Value map[string]interface{} `json:"value"`
}

// NewPlanEntitlementResponseDto instantiates a new PlanEntitlementResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanEntitlementResponseDto(name string, entitlementId string, externalId string, datatype string, description string, created time.Time, modified time.Time, value map[string]interface{}) *PlanEntitlementResponseDto {
	this := PlanEntitlementResponseDto{}
	this.Name = name
	this.EntitlementId = entitlementId
	this.ExternalId = externalId
	this.Datatype = datatype
	this.Description = description
	this.Created = created
	this.Modified = modified
	this.Value = value
	return &this
}

// NewPlanEntitlementResponseDtoWithDefaults instantiates a new PlanEntitlementResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanEntitlementResponseDtoWithDefaults() *PlanEntitlementResponseDto {
	this := PlanEntitlementResponseDto{}
	return &this
}

// GetName returns the Name field value
func (o *PlanEntitlementResponseDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PlanEntitlementResponseDto) SetName(v string) {
	o.Name = v
}

// GetEntitlementId returns the EntitlementId field value
func (o *PlanEntitlementResponseDto) GetEntitlementId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementId
}

// GetEntitlementIdOk returns a tuple with the EntitlementId field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseDto) GetEntitlementIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementId, true
}

// SetEntitlementId sets field value
func (o *PlanEntitlementResponseDto) SetEntitlementId(v string) {
	o.EntitlementId = v
}

// GetExternalId returns the ExternalId field value
func (o *PlanEntitlementResponseDto) GetExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseDto) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *PlanEntitlementResponseDto) SetExternalId(v string) {
	o.ExternalId = v
}

// GetDatatype returns the Datatype field value
func (o *PlanEntitlementResponseDto) GetDatatype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datatype
}

// GetDatatypeOk returns a tuple with the Datatype field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseDto) GetDatatypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datatype, true
}

// SetDatatype sets field value
func (o *PlanEntitlementResponseDto) SetDatatype(v string) {
	o.Datatype = v
}

// GetDescription returns the Description field value
func (o *PlanEntitlementResponseDto) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PlanEntitlementResponseDto) SetDescription(v string) {
	o.Description = v
}

// GetCreated returns the Created field value
func (o *PlanEntitlementResponseDto) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *PlanEntitlementResponseDto) SetCreated(v time.Time) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *PlanEntitlementResponseDto) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseDto) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *PlanEntitlementResponseDto) SetModified(v time.Time) {
	o.Modified = v
}

// GetValue returns the Value field value
func (o *PlanEntitlementResponseDto) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseDto) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *PlanEntitlementResponseDto) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o PlanEntitlementResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["entitlementId"] = o.EntitlementId
	}
	if true {
		toSerialize["externalId"] = o.ExternalId
	}
	if true {
		toSerialize["datatype"] = o.Datatype
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["modified"] = o.Modified
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullablePlanEntitlementResponseDto struct {
	value *PlanEntitlementResponseDto
	isSet bool
}

func (v NullablePlanEntitlementResponseDto) Get() *PlanEntitlementResponseDto {
	return v.value
}

func (v *NullablePlanEntitlementResponseDto) Set(val *PlanEntitlementResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanEntitlementResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanEntitlementResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanEntitlementResponseDto(val *PlanEntitlementResponseDto) *NullablePlanEntitlementResponseDto {
	return &NullablePlanEntitlementResponseDto{value: val, isSet: true}
}

func (v NullablePlanEntitlementResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanEntitlementResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


