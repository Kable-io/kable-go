/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateEntitlementDto struct for UpdateEntitlementDto
type UpdateEntitlementDto struct {
	// The name of the entitlement
	Name *string `json:"name,omitempty"`
	// An identifier for the entitlement as defined by your API.
	ExternalId *string `json:"externalId,omitempty"`
	// The type of data supported by the entitlement.
	Datatype *string `json:"datatype,omitempty"`
	// A description of the entitlement.
	Description *string `json:"description,omitempty"`
}

// NewUpdateEntitlementDto instantiates a new UpdateEntitlementDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEntitlementDto() *UpdateEntitlementDto {
	this := UpdateEntitlementDto{}
	var datatype string = "BOOLEAN"
	this.Datatype = &datatype
	return &this
}

// NewUpdateEntitlementDtoWithDefaults instantiates a new UpdateEntitlementDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEntitlementDtoWithDefaults() *UpdateEntitlementDto {
	this := UpdateEntitlementDto{}
	var datatype string = "BOOLEAN"
	this.Datatype = &datatype
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateEntitlementDto) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntitlementDto) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateEntitlementDto) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateEntitlementDto) SetName(v string) {
	o.Name = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *UpdateEntitlementDto) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntitlementDto) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *UpdateEntitlementDto) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *UpdateEntitlementDto) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetDatatype returns the Datatype field value if set, zero value otherwise.
func (o *UpdateEntitlementDto) GetDatatype() string {
	if o == nil || o.Datatype == nil {
		var ret string
		return ret
	}
	return *o.Datatype
}

// GetDatatypeOk returns a tuple with the Datatype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntitlementDto) GetDatatypeOk() (*string, bool) {
	if o == nil || o.Datatype == nil {
		return nil, false
	}
	return o.Datatype, true
}

// HasDatatype returns a boolean if a field has been set.
func (o *UpdateEntitlementDto) HasDatatype() bool {
	if o != nil && o.Datatype != nil {
		return true
	}

	return false
}

// SetDatatype gets a reference to the given string and assigns it to the Datatype field.
func (o *UpdateEntitlementDto) SetDatatype(v string) {
	o.Datatype = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateEntitlementDto) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntitlementDto) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateEntitlementDto) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateEntitlementDto) SetDescription(v string) {
	o.Description = &v
}

func (o UpdateEntitlementDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.Datatype != nil {
		toSerialize["datatype"] = o.Datatype
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateEntitlementDto struct {
	value *UpdateEntitlementDto
	isSet bool
}

func (v NullableUpdateEntitlementDto) Get() *UpdateEntitlementDto {
	return v.value
}

func (v *NullableUpdateEntitlementDto) Set(val *UpdateEntitlementDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEntitlementDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEntitlementDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEntitlementDto(val *UpdateEntitlementDto) *NullableUpdateEntitlementDto {
	return &NullableUpdateEntitlementDto{value: val, isSet: true}
}

func (v NullableUpdateEntitlementDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEntitlementDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


