/*
Kable API

The Kable API allows developers to manage customers, plans, and usage data for their API.  ## API Host and Environments  Kable is accessible in Live and Test environments for authentication and metering of client API requests. You will have separate API keys to access each environment.  You should only use Kable's Live environment for your own production data. All other configured environments should use Kable's Test environment.  ## API Protocols and Headers  All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure security. Calls made over HTTP will fail. Any requests without proper authentication will also fail.  The Kable API uses standard JSON for requests and responses. Be sure to set both the `Content-Type` and `Accept` headers on each request to `application/json`.  Each Kable API response includes a `requestId` as the `X-REQUEST-ID` response header. The `requestId` is included on most responses regardless whether the API request succeeded or failed. You can use this `requestId` to help with debugging or when contacting support regarding a specific API call.  ## API Versioning  All Kable endpoints are versioned. After the host, each API can be found at `/api/vX/...` where X is the API version.  We strive to ensure that changes to the Kable API are backward compatible. Sometimes, though, we must break from older design paradigms to make the product better. When this happens, a new version of the API is released.  The current version of the Kable API is `v1`.  

API version: 1.0.0
Contact: contact@kable.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateBundleRequestDto struct for CreateBundleRequestDto
type CreateBundleRequestDto struct {
	BundleId string `json:"bundleId"`
	Name string `json:"name"`
	ExternalId *string `json:"externalId,omitempty"`
	Description *string `json:"description,omitempty"`
	Nickname *string `json:"nickname,omitempty"`
	PlanIds []string `json:"planIds,omitempty"`
	Currency *string `json:"currency,omitempty"`
	CostPerCredit *float32 `json:"costPerCredit,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewCreateBundleRequestDto instantiates a new CreateBundleRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBundleRequestDto(bundleId string, name string) *CreateBundleRequestDto {
	this := CreateBundleRequestDto{}
	this.BundleId = bundleId
	this.Name = name
	return &this
}

// NewCreateBundleRequestDtoWithDefaults instantiates a new CreateBundleRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBundleRequestDtoWithDefaults() *CreateBundleRequestDto {
	this := CreateBundleRequestDto{}
	return &this
}

// GetBundleId returns the BundleId field value
func (o *CreateBundleRequestDto) GetBundleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetBundleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BundleId, true
}

// SetBundleId sets field value
func (o *CreateBundleRequestDto) SetBundleId(v string) {
	o.BundleId = v
}

// GetName returns the Name field value
func (o *CreateBundleRequestDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateBundleRequestDto) SetName(v string) {
	o.Name = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CreateBundleRequestDto) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CreateBundleRequestDto) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CreateBundleRequestDto) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateBundleRequestDto) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateBundleRequestDto) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateBundleRequestDto) SetDescription(v string) {
	o.Description = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *CreateBundleRequestDto) GetNickname() string {
	if o == nil || o.Nickname == nil {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetNicknameOk() (*string, bool) {
	if o == nil || o.Nickname == nil {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *CreateBundleRequestDto) HasNickname() bool {
	if o != nil && o.Nickname != nil {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *CreateBundleRequestDto) SetNickname(v string) {
	o.Nickname = &v
}

// GetPlanIds returns the PlanIds field value if set, zero value otherwise.
func (o *CreateBundleRequestDto) GetPlanIds() []string {
	if o == nil || o.PlanIds == nil {
		var ret []string
		return ret
	}
	return o.PlanIds
}

// GetPlanIdsOk returns a tuple with the PlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetPlanIdsOk() ([]string, bool) {
	if o == nil || o.PlanIds == nil {
		return nil, false
	}
	return o.PlanIds, true
}

// HasPlanIds returns a boolean if a field has been set.
func (o *CreateBundleRequestDto) HasPlanIds() bool {
	if o != nil && o.PlanIds != nil {
		return true
	}

	return false
}

// SetPlanIds gets a reference to the given []string and assigns it to the PlanIds field.
func (o *CreateBundleRequestDto) SetPlanIds(v []string) {
	o.PlanIds = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreateBundleRequestDto) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreateBundleRequestDto) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CreateBundleRequestDto) SetCurrency(v string) {
	o.Currency = &v
}

// GetCostPerCredit returns the CostPerCredit field value if set, zero value otherwise.
func (o *CreateBundleRequestDto) GetCostPerCredit() float32 {
	if o == nil || o.CostPerCredit == nil {
		var ret float32
		return ret
	}
	return *o.CostPerCredit
}

// GetCostPerCreditOk returns a tuple with the CostPerCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetCostPerCreditOk() (*float32, bool) {
	if o == nil || o.CostPerCredit == nil {
		return nil, false
	}
	return o.CostPerCredit, true
}

// HasCostPerCredit returns a boolean if a field has been set.
func (o *CreateBundleRequestDto) HasCostPerCredit() bool {
	if o != nil && o.CostPerCredit != nil {
		return true
	}

	return false
}

// SetCostPerCredit gets a reference to the given float32 and assigns it to the CostPerCredit field.
func (o *CreateBundleRequestDto) SetCostPerCredit(v float32) {
	o.CostPerCredit = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CreateBundleRequestDto) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBundleRequestDto) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreateBundleRequestDto) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CreateBundleRequestDto) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o CreateBundleRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bundleId"] = o.BundleId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Nickname != nil {
		toSerialize["nickname"] = o.Nickname
	}
	if o.PlanIds != nil {
		toSerialize["planIds"] = o.PlanIds
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.CostPerCredit != nil {
		toSerialize["costPerCredit"] = o.CostPerCredit
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableCreateBundleRequestDto struct {
	value *CreateBundleRequestDto
	isSet bool
}

func (v NullableCreateBundleRequestDto) Get() *CreateBundleRequestDto {
	return v.value
}

func (v *NullableCreateBundleRequestDto) Set(val *CreateBundleRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBundleRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBundleRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBundleRequestDto(val *CreateBundleRequestDto) *NullableCreateBundleRequestDto {
	return &NullableCreateBundleRequestDto{value: val, isSet: true}
}

func (v NullableCreateBundleRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBundleRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


